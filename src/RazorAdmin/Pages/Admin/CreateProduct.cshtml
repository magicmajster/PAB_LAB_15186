@page
@model RazorAdmin.Pages.Admin.CreateProductModel
@{
    ViewData["Title"] = "Create New Product";
}

<div class="container mt-4">
    <h2>Create New Product</h2>

    <form id="createProductForm">
        <div class="form-group">
            <label for="productName">Product Name</label>
            <input type="text" class="form-control" id="productName" required>
            <div class="invalid-feedback">Please provide a product name.</div>
        </div>

        <div class="form-group">
            <label for="productPrice">Price</label>
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">$</span>
                </div>
                <input type="number" step="0.01" class="form-control" id="productPrice" required>
                <div class="invalid-feedback">Please provide a valid price.</div>
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Create Product</button>
        <a href="/Admin/Dashboard" class="btn btn-secondary">Cancel</a>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function
            const token = sessionStorage.getItem('jwt') ||
                document.cookie.split('; ')
                    .find(row => row.startsWith('jwt='))
                    ?.split('=')[1];

            if (!token) {
                window.location.href = '/Login';
                return;
            }

            const form = document.getElementById('createProductForm');

            form.addEventListener('submit', function (e) {
                e.preventDefault();

                if (!form.checkValidity()) {
                    e.stopPropagation();
                    form.classList.add('was-validated');
                    return;
                }

                const product = {
                    name: document.getElementById('productName').value,
                    price: parseFloat(document.getElementById('productPrice').value)
                };

                fetch('http://localhost:5135/api/products', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(product)
                })
                    .then(response => {
                        if (response.status === 401) {
                            window.location.href = '/Login';
                            return;
                        }
                        if (!response.ok) throw new Error('Failed to create product');
                        return response.json();
                    })
                    .then(data => {
                        alert('Product created successfully!');
                        window.location.href = '/Admin/Dashboard';
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error creating product: ' + error.message);
                    });
            });
        });
    </script>
}